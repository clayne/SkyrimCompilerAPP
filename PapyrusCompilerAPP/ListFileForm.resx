<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCf
        3xBcmd9QX5nhj16Z4MVemeDdXpnh816Z4fNemeDdXpngxV6Y4Itfmd5GAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABfmt5WX5ng3V6Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emuDFX5riTgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABVqqoCXpngi16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/XpngnV2i6AoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAXZvgQl6Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpjg2V2b4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF2Z4XBemeD/Xpng/16Z4P9Ha5n/P1yC/z9cgv8/XIL/P1yC/z9cgv8/XIL/P1yC/z9c
        gv8/XIL/P1yC/z9cgv8/XIL/THaq/16Z4P9emeD/Xpng/2CZ4ywAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABcmd9QXpng/16Z4P9emeD/Xpng/2dxef+lsLH/pbCx/6Wwsf+lsLH/pbCx/6Ww
        sf+lsLH/pbCx/6Wwsf+lsLH/pbCx/6Wwsf9dZm//Xpng/16Z4P9emeD/Xpng32aZ3Q4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF6Y4M1emeD/Xpng/16Z4P9emeD/0eDg/9Hg4P/R4OD/0eDg/9Hg
        4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/7/Nzf9emeD/Xpng/16Z4P9emeD/XZnfmQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfmOFmXpng/16Z4P9emeD/Xpng/16Z4P/R4OD/0eDg/9Hg
        4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/16Z4P9emeD/Xpng/16Z
        4P9emeD/X5vhMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF6Y4M1emeD/Xpng/16Z4P9emeD/Xpng/9Hg
        4P/R4OD/qbW2/6m1tv+ptbb/qbW2/6m1tv+ptbb/qbW2/6m1tv+ptbb/qbW2/9Hg4P/R4OD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9dmd+ZAAAAAAAAAAAAAAAAAAAAAAAAAABgm+I8Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/0eDg/9Hg4P+Ol5n/aW5x/2lucf9pbnH/aW5x/2lucf9pbnH/aW5x/2lucf+kr7D/0eDg/9Hg
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z3+tmmcwEAAAAAAAAAAAAAAAAAAAAAF6X34FemeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P/R4OD/0eDg/8fV1v/H1db/x9XW/8fV1v/H1db/x9XW/8fV1v/H1db/x9XW/8fV
        1v/R4OD/0eDg/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/12b4EIAAAAAAAAAAAAAAAAAAAAAXpngxV6Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/9Hg4P/R4OD/jpeZ/0pNUf9KTVH/Sk1R/0pNUf9KTVH/Sk1R/0pN
        Uf9KTVH/pK+w/9Hg4P/R4OD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/XpjgiwAAAAAAAAAAAAAAAAAA
        AABemeDdXpng/16Z4P9emeD/Xpng/16Z4P9emeD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg
        4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeG5AAAAAAAA
        AAAAAAAAAAAAAF6Z4fNemeD/Xpng/16Z4P9emeD/Xpng/16Z4P/R4OD/0eDg/3mAgv8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/6Wwsf/R4OD/sLy9/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/12Z
        4OkAAAAAAAAAAAAAAAAAAAAAXpnh816Z4P9emeD/Xpng/16Z4P9emeD/Xpng/9Hg4P/R4OD/0eDg/9Hg
        4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/6GrrP8xMTX/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/XZng6QAAAAAAAAAAAAAAAAAAAABemeDdXpng/16Z4P9emeD/Xpng/16Z4P9emeD/0eDg/9Hg
        4P+Ol5n/XmJl/15iZf9eYmX/XmJl/15iZf9eYmX/XmJl/15iZf90e37/IB8j/zExNf9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeG5AAAAAAAAAAAAAAAAAAAAAF6Z4MVemeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P/R4OD/0eDg/7TAwf+0wMH/tMDB/7TAwf+0wMH/tMDB/7TAwf+0wMH/cnh6/yAfI/8gHyP/MTE1/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Y4IsAAAAAAAAAAAAAAAAAAAAAXpjgi16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/9Hg4P/R4OD/eYCC/3mAgv95gIL/eYCC/3mAgv/R4OD/ytnZ/5WeqP+kqbD/qK61/6yz
        u/+vuMH/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/X5ngSgAAAAAAAAAAAAAAAAAAAABfmd5GXpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/0eDg/9Hg4P+lsLH/pbCx/6Wwsf+lsLH/pbCx/9Hg4P/DztH/////////
        ////////2+j4/2mg4v9emeD/Xpng/16Z4P9emeD/Xpng/16Z4O1Vf9QGAAAAAAAAAAAAAAAAAAAAAAAA
        AABemODNXpng/16Z4P9emeD/Xpng/16Z4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/8XP
        0v///////////9vo+P9poOL/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/XZnfmQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF+Y4WZemeD/Xpng/16Z4P9emeD/Xpng/9Hg4P/R4OD/0eDg/9Hg4P/R4OD/0eDg/9Hg
        4P/R4OD/xc/S///////b6Pj/aaDi/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9fm+EyAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF6Y4M1emeD/Xpng/16Z4P9emeD/0eDg/9Hg4P/R4OD/0eDg/9Hg
        4P/R4OD/0eDg/9Hg4P/Fz9L/2+j4/2mg4v9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/XZnfmQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYZjhKl6Z4P9emeD/Xpng/16Z4P+JtOD/tM7g/7TO
        4P+0zuD/tM7g/7TO4P+0zuD/tM7g/83e6v9poOL/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4LcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYZjhKl6Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYJnjLF6Z
        4N9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpnf0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAZpndDl+a4Z9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4J0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF2X32BemeDfXpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16a4MVfmuJOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFuS2w5dl99GXZjhh16Z4MVemeDdXpnh816Z
        4fNemeDdXpngxV6X34Fgm+I8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////8A///8AD//8AAP/+AAB//AAAP/gAAB/wAAAP8AAAD+AA
        AAfgAAAHwAAAB8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAfgAAAH4AAAB/AAAA/wAAAP+AAAH/wA
        AD/+AAB//wAA///AA///8A////////////8=
</value>
  </data>
</root>